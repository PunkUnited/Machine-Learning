import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
test = pd.read_csv('test.csv', na_values="?")
train = pd.read_csv('train.csv', na_values="?")
test['is_uzbekistan_recruitment'] = test['is_uzbekistan_recruitment'].replace('f', 0).replace('t', 1)
train['is_uzbekistan_recruitment'] = train['is_uzbekistan_recruitment'].replace('f', 0).replace('t', 1)
test['requirements_id_priority_category'] = test['requirements_id_priority_category'].replace('Опытные кадры', 1)
train['requirements_id_priority_category'] = train['requirements_id_priority_category'].replace('Опытные кадры', 1)
del[test['retraining_grant_value'], train['retraining_grant_value'], train['education_academic_degree'], test['education_academic_degree'], test['time_posted'], train['time_posted'], test['id'], train['id'], test['date_creation_mistake'],test['date_creation'], test['date_posted_mistake'],  test['date_time_posted'], test['date_posted'], train['date_creation'], train['base_salary_max'], train['base_salary_min'], train['base_salary'], train['date_creation_mistake'], train['date_posted'], train['date_posted_mistake'], train['date_time_posted'], train['metro_station'], test['metro_station'], test['drive_licences'], train['drive_licences'], train['id_hiring_organization'], test['id_hiring_organization'], train['job_location_additional_address_info'], test['job_location_additional_address_info'], test['organization'], train['organization'], train['region'], test['region']]
large_test = pd.concat([test.pop(x) for x in ['profession', 'requirements_required_certificates', 'career_perspective', 'education_requirements_speciality', 'industry', 'job_location_address', 'okso_code', 'retraining_condition', 'social_protecteds_social_protected']], axis=1)
large_train = pd.concat([train.pop(x) for x in ['profession', 'requirements_required_certificates', 'career_perspective', 'education_requirements_speciality', 'industry', 'job_location_address', 'okso_code', 'retraining_condition', 'social_protecteds_social_protected']], axis=1)
texts_test = pd.concat([test.pop(x) for x in ['additional_info', 'responsibilities', 'requirements_qualifications', 'title', 'job_benefits', 'job_benefits_other_benefits']], axis=1)
texts_train = pd.concat([train.pop(x) for x in ['additional_info', 'responsibilities', 'requirements_qualifications', 'title', 'job_benefits', 'job_benefits_other_benefits']], axis=1)
value_test = pd.concat([test.pop(x) for x in ['work_places', 'premium_size', 'experience_requirements']], axis=1)
value_train = pd.concat([train.pop(x) for x in ['work_places', 'premium_size', 'experience_requirements']], axis=1)
geolocation_test = pd.concat([test.pop(x) for x in ['job_location_geo_latitude', 'job_location_geo_longitude']], axis=1)
geolocation_train = pd.concat([train.pop(x) for x in ['job_location_geo_latitude', 'job_location_geo_longitude']], axis=1)
TFTest = pd.concat([test.pop(x) for x in ['accommodation_capability', 'caring_workers', 'disabled', 'dms', 'driver_licence_a', 'driver_licence_b', 'driver_licence_c', 'driver_licence_d', 'driver_licence_e', 'is_uzbekistan_recruitment', 'large_families', 'minor_workers', 'need_medcard', 'payment_meals', 'payment_sports_activities', 'released_persons', 'requirements_id_priority_category', 'retraining_grant', 'single_parent', 'vouchers_health_institutions', 'workers_with_disabled_children']], axis=1)
TFTrain = pd.concat([train.pop(x) for x in ['accommodation_capability', 'caring_workers', 'disabled', 'dms', 'driver_licence_a', 'driver_licence_b', 'driver_licence_c', 'driver_licence_d', 'driver_licence_e', 'is_uzbekistan_recruitment', 'large_families', 'minor_workers', 'need_medcard', 'payment_meals', 'payment_sports_activities', 'released_persons', 'requirements_id_priority_category', 'retraining_grant', 'single_parent', 'vouchers_health_institutions', 'workers_with_disabled_children']], axis=1)
train = train.fillna('na')
test = test.fillna('na')
TFTrain = TFTrain.fillna('0').astype('int')
TFTest = TFTest.fillna('0').astype('int')
y = train.pop('mean_salary')
y.to_csv('yTrain.csv', index=False)
train.to_csv('TrueTrain.csv', index=False)
test.to_csv('TrueTest.csv', index=False)
value_test.to_csv('ValueTest.csv', index=False)
value_train.to_csv('ValueTrain.csv', index=False)
texts_train.to_csv('TextTrain.csv', index=False)
texts_test.to_csv('TextTest.csv', index=False)
geolocation_train.to_csv('GeolocationTrain.csv', index=False)
geolocation_test.to_csv('GeolocationTest.csv', index=False)
large_test.to_csv('LargeTest.csv', index=False)
large_train.to_csv('LargeTrain.csv', index=False)
TFTrain.to_csv('TFTrain.csv', index=False)
TFTest.to_csv('TFTest.csv', index=False)